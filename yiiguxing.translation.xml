<application>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1758521283172" />
  </component>
  <component name="Translation.OpenAISettings">
    <option name="OPEN_AI">
      <open-ai>
        <option name="ENDPOINT" value="https://api.chatanywhere.tech" />
      </open-ai>
    </option>
  </component>
  <component name="Translation.Settings">
    <option name="primaryLanguage" value="CHINESE_SIMPLIFIED" />
    <option name="translator" value="OPEN_AI" />
  </component>
  <component name="Translation.States">
    <option name="translationDialogHeight" value="260" />
    <option name="translationDialogLocationX" value="898" />
    <option name="translationDialogLocationY" value="551" />
    <histories>
      <item value="update environment" />
      <item value="container" />
      <item value="cmake minimum required" />
      <item value="Still waiting for package manifests to be fetched remotely." />
      <item value="Schedules" />
      <item value="Positive" />
      <item value="Proto" />
      <item value="HANGUP" />
      <item value="reason" />
      <item value="INVITE" />
      <item value="On failure, print an error and resume with null." />
      <item value="Check your module classpath for missing or conflicting dependencies" />
      <item value="Synthesis" />
      <item value="This project is configured to use an older Gradle JVM that supports up to version 1.8 but the current AGP requires a Gradle JVM that supports version 11." />
      <item value="max connection count reached." />
      <item value="send establish message" />
      <item value="INITIALIZED" />
      <item value="recall" />
      <item value="re call" />
      <item value="CELLULAR" />
      <item value="Embed" />
      <item value="getEmbedVoiceNameForNet not find by sampleRateConvertList" />
      <item value="remote" />
      <item value="Actual" />
      <item value="expand" />
      <item value="TRANSPORT CELLULAR" />
      <item value="Conflicting overloads: public final fun getVoiceName(): String defined in com. meituan. ai. multiinteraction. demo. constants. ConversationConfig, public final fun getVoiceName(): String defined in com. meituan. ai. multiinteraction. demo. constants. ConversationConfi" />
      <item value="recog callback" />
      <item value="receive" />
      <item value="Overtime" />
      <item value="is blank" />
      <item value="Returns true if this char sequence is empty or consists solely of whitespace characters according to Char. isWhitespace." />
      <item value="INFO KEY AUDIO PACKET DATA" />
      <item value="Collapse" />
      <item value="remain" />
      <item value="path pattern" />
      <item value="Updates were rejected because a pushed branch tip is behind its remote" />
      <item value="combined" />
      <item value="ARROW" />
      <item value="crash" />
      <item value="CONTRACT" />
      <item value="Contract" />
      <item value="send location task" />
      <item value="Configuration" />
      <item value="role" />
      <item value="Do not place Android context classes in static fields (static reference to FloatingWindowManager which has field context pointing to Context); this is a memory leak" />
      <item value="Article" />
      <item value="Do not place Android context classes in static fields (static reference to UploadImageBottomSheetHelper which has field activity pointing to Activity);" />
      <item value="The CoroutineScope associated with this ViewModel. The CoroutineScope. coroutineContext is configured with: SupervisorJob: ensures children jobs can fail independently of each other. MainCoroutineDispatcher. immediate: executes jobs immediately on the main (UI) thread. If the Dispatchers. Main is not available on the current platform (e. g., Linux), we fallback to an EmptyCoroutineContext. This scope is automatically cancelled when the ViewModel is cleared, and can be replaced by using the ViewModel constructor overload that takes in a viewModelScope: CoroutineScope. For background execution, use kotlinx. coroutines. withContext to switch to appropriate dispatchers (e. g., kotlinx. coroutines. IO). See Also: ViewModel. onCleared" />
      <item value="Thought" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE_SIMPLIFIED" value="33" />
        <entry key="ENGLISH" value="10" />
      </map>
    </option>
  </component>
</application>